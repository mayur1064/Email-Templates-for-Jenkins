pipeline {
    agent any 
    {
    //Environment variables which can vary in our script
    environment {
        SCM = "Your-Git-Repository"
        port = "Port-Number"
        profile = "Profile"
        artifact = "user-service" //Name of the Jar file   
    }
    
    stages {
     
    //Stage 1     
    stage('Git SCM') {
          steps {
                //Generated By using Pipeline Syntax option
                git credentialsId: '91264b12-de65-4c14-830d-dbaf25d77087', url: '${SCM}'
             }
    }

    //Stage 2
    stage('Compile-Install'){
      steps {
          catchError {
          //To stop the previosly executing jar file running on port 8088(If jar file is running locally)
          sh "npx kill-port ${env.port}"
          //Maven Compile Goal ( -Pdev to use development spring profile)
          bat 'mvn clean install -P${profile}'
          
          }
      }
      //Post Build Actions
      post {
          //If Build fails 
          failure {
              script {
                  //Publish JUnit reports
                  junit '/target/surefire-reports/*.xml'
                  //Send Email notification to developers and culprits if failure
                  emailext attachLog:true , body: '''${JELLY_SCRIPT,template="html-with-health-and-console"}''', 
                    replyTo: '$DEFAULT_REPLYTO',
                    recipientProviders: [[$class: 'DevelopersRecipientProvider'],[$class: 'CulpritsRecipientProvider'],
                    [$class: 'RequesterRecipientProvider']],
                    subject: 'BUILD FAILED'
                exit 0;
                    
              }
              
          }
      }
    }
    
    //Stage 3
    stage('SonarQube Code analysis') {
        steps {    
            script {
                def scannerHome = tool 'sonarqube';
                withSonarQubeEnv('sonarqube') { 
                    bat 'mvn sonar:sonar'
                }
            }
        }
    }

    //Stage 4
    stage("Quality Gate") {
          steps {
              catchError {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                    //Wait for Status of Quality Gate
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
              }
          }
          post {
         //If Quality Gate fails send notification
          failure {
              script {
              emailext attachLog:true , body: ''' <h4>Pipeline aborted due to quality gate failure</h4>  ${JELLY_SCRIPT,template="html-health-quality"}''', 
                    replyTo: '$DEFAULT_REPLYTO',
                    recipientProviders: [[$class: 'DevelopersRecipientProvider'],[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                    subject: 'Quality Gate Failure'
                exit 0;
                    
              }
              
          }
        
      }
    }

    //Stage 5

   //For Deploying Locally
    stage('Deploy') {
        steps {
            script {
                //To run the jar file in background
                sh "JENKINS_NODE_COOKIE=dontKillMe nohup java -jar  ./target/user-service.jar &"
            }
        }
    }
    
    //For Deploying to AWS server
    // stage('AWS Deploy') {
    //     steps {
    //          script {
    //              sshPublisher(publishers: [sshPublisherDesc(configName: 'aws_server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''kill -9 $(lsof -t -i:8088) sudo java -jar user-service.jar --port=8088
    //             exit 0''', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target', sourceFiles: 'target/user-service.jar')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
    //             }
    //     }   
    //  }


    
  }
  //Notificaion for Deployment successfull
  post {
          success {
              script {
              emailext attachLog:true , body: '''${JELLY_SCRIPT,template="html-health-deploy"}
              <br> Application Deployed Successfully''', 
                    replyTo: '$DEFAULT_REPLYTO',
                    recipientProviders: [[$class: 'DevelopersRecipientProvider'],[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                    subject: 'Deployment Success'
    
                    
              }
              
          }
      }
  
}
    
